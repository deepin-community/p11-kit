Description: Do not use getauxval on !linux.
Origin: vendor
Bug-Debian: http://bugs.debian.org/718285
Author: Andreas Metzler <ametzler@debian.org>
Last-Update: 2021-06-20

--- a/common/compat.c
+++ b/common/compat.c
@@ -854,11 +854,11 @@
 #endif /* HAVE_MKDTEMP */
 
 #ifndef HAVE_GETAUXVAL
 
 unsigned long
-getauxval (unsigned long type)
+_p11_getauxval (unsigned long type)
 {
 	static unsigned long secure = 0UL;
 	static bool check_secure_initialized = false;
 
 	/*
@@ -903,11 +903,11 @@
 #endif /* HAVE_GETAUXVAL */
 
 char *
 secure_getenv (const char *name)
 {
-	if (getauxval (AT_SECURE))
+	if (_p11_getauxval (AT_SECURE))
 		return NULL;
 	return getenv (name);
 }
 
 #ifndef HAVE_STRERROR_R
--- a/common/compat.h
+++ b/common/compat.h
@@ -350,14 +350,15 @@
 #endif /* HAVE_TIMEGM */
 
 #ifdef HAVE_GETAUXVAL
 
 #include <sys/auxv.h>
+#define _p11_getauxval(X) getauxval(X)
 
 #else /* !HAVE_GETAUXVAL */
 
-unsigned long     getauxval (unsigned long type);
+unsigned long     _p11_getauxval (unsigned long type);
 
 #define AT_SECURE 23
 
 #endif /* !HAVE_GETAUXVAL */
 
--- a/common/path.c
+++ b/common/path.c
@@ -112,11 +112,11 @@
 static char *
 expand_homedir (const char *remainder)
 {
 	const char *env;
 
-	if (getauxval (AT_SECURE)) {
+	if (_p11_getauxval (AT_SECURE)) {
 		errno = EPERM;
 		return NULL;
 	}
 
 	while (is_path_separator (remainder[0]))
--- a/common/frob-getauxval.c
+++ b/common/frob-getauxval.c
@@ -53,9 +53,9 @@
 	if (type == 0) {
 		fprintf (stderr, "usage: frob-getauxval 23");
 		abort ();
 	}
 
-	ret = getauxval (type);
+	ret = _p11_getauxval (type);
 	printf ("getauxval(%lu) == %lu\n", type, ret);
 	return (int)ret;
 }
--- a/configure.ac
+++ b/configure.ac
@@ -61,10 +61,16 @@
 	*-*-mingw*)
 		AC_DEFINE_UNQUOTED(OS_WIN32, 1, [Building for win32])
 		os_win32=yes
 		os_unix=no
 		;;
+	*-*-linux*)
+		AC_DEFINE_UNQUOTED(OS_UNIX, 1, [Building for unix])
+		os_win32=no
+		os_unix=yes
+		os_linux=yes
+		;;
 	*)
 		AC_DEFINE_UNQUOTED(OS_UNIX, 1, [Building for unix])
 		os_win32=no
 		os_unix=yes
 		;;
@@ -112,11 +118,15 @@
 
 	# These are things we can work around
 	AC_CHECK_HEADERS([sys/resource.h sys/un.h ucred.h])
 	AC_CHECK_MEMBERS([struct dirent.d_type],,,[#include <dirent.h>])
 	AC_CHECK_FUNCS([getprogname getexecname basename mkstemp mkdtemp])
-	AC_CHECK_FUNCS([getauxval getresuid secure_getenv])
+	AC_CHECK_FUNCS([getresuid secure_getenv])
+	if test "$os_linux" = "yes"; then
+		# Use getauxval on Linux only.
+		AC_CHECK_FUNCS([getauxval])
+	fi
 	AC_CHECK_FUNCS([strnstr memdup strndup strerror_r])
 	AC_CHECK_FUNCS([reallocarray])
 	AC_CHECK_DECLS([reallocarray], [], [], [[#include <stdlib.h>]])
 	AC_CHECK_FUNCS([fdwalk])
 	AC_CHECK_FUNCS([setenv])
--- a/p11-kit/conf.c
+++ b/p11-kit/conf.c
@@ -240,11 +240,11 @@
 		error = EINVAL;
 		goto finished;
 	}
 
 	if (mode != CONF_USER_NONE && !p11_conf_force_user_config) {
-		if (getauxval (AT_SECURE)) {
+		if (_p11_getauxval (AT_SECURE)) {
 			p11_debug ("skipping user config in setuid or setgid program");
 			mode = CONF_USER_NONE;
 #ifdef OS_UNIX
 		} else if (getuid () == 0) {
 			p11_debug ("skipping user config in program running as root");
--- a/p11-kit/frob-setuid.c
+++ b/p11-kit/frob-setuid.c
@@ -68,11 +68,11 @@
 
 	field = p11_kit_config_option (module, "setting");
 	printf ("'setting' on module 'one': %s\n", field ? field : "(null)");
 
 	assert (field != NULL);
-	if (getauxval (AT_SECURE))
+	if (_p11_getauxval (AT_SECURE))
 		assert (strcmp (field, "system1") == 0);
 	else
 		assert (strcmp (field, "user1") == 0);
 
 	free (field);
